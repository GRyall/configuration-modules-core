# ${license-info}
# ${developer-info}
# ${author-info}

#
# ofed - NCM OFED configuration component
#
# Configure the ntp time daemon
#
################################################################################

package NCM::Component::ofed;

#
# a few standard statements, mandatory for all components
#

use strict;
use LC::Check;
use NCM::Check;
use NCM::Component;
use vars qw(@ISA $EC);
@ISA = qw(NCM::Component);
$EC=LC::Exception::Context->new->will_store_all;

use CAF::Process;
use CAF::FileEditor;
use LC::File;

use File::Basename;
use Encode qw(encode_utf8);


my $compname = "NCM-ofed";
my $mypath = '/software/components/ofed';

use constant OPENIBCONFIG => "/etc/infiniband/openib.conf";
use constant OPENIBOPTIONS => qw(
    onboot
    renice_ib_mad
    set_ipoib_cm
    srpha_enable
    srp_daemon_enable
    ipoib_mtu
);
use constant OPENIBMODULES => qw(
    ucm
    rdma_cm
    rdma_ucm
    ipoib
    sdp
    srp
    srpt
    rds
    iser
);
use constant OPENIBHARDWARE => qw(
    mthca
    mlx4
    mlx_en
    ipath
    qib
    qlgc_vnic
    cxgb3
    nes
);

##########################################################################
sub Configure {
##########################################################################

    our ($self,$config)=@_;

    our $base;
    my ($result,$tree,$contents);
    
    # Save the date.
    my $date = localtime();
    
    $base="$mypath/openib";  
    # walk through the openib parts and generate the config
    $contents = '';

    $contents .= "#\n# File generated by ncm-ofed on $date\n#\n";

    sub getcfg {
        my $p = shift;
        my @os = @_;

        my $suff="_LOAD";
        $suff='' if ( $p eq "options");

        my $c = '';
        my $ans;
    
        my $tr = $config->getElement("$base/$p")->getTree;
        $c .= "\n";
        my $o;
        foreach $o (@os) {
            if ($o eq "ipoib_mtu") {
                $ans=%$tr->{$o};
            } else {
                $ans="no";
                $ans = "yes" if (exists(%$tr->{$o}) && %$tr->{$o});
            }; 
            $c .= uc($o)."$suff=".$ans."\n";
        }
        foreach $o (keys(%$tr)) {
            $self->warn("Unknown $o in $p") if (! (grep {$_ eq $o} @os));
        }
        $c .= "\n";
        
        return $c;
    }
    ## main options
    $contents .= getcfg("options",OPENIBOPTIONS);
    
    ## module options
    $contents .= getcfg("modules",OPENIBMODULES);

    ## hardware module options
    $contents .= getcfg("hardware",OPENIBHARDWARE);


    # write the config file
    ## check for location first
    my $cfg = OPENIBCONFIG;
    if ($config->elementExists("$base/config")) {
        $cfg = $config->getValue("$base/config");
    }
    ## for now, warn when using non-default location
    $self->warn("Using non-default loaction $cfg") if ( ! ($cfg eq OPENIBCONFIG) );
    
    my $cfgpath = dirname($cfg);
    mkpath($cfgpath, 0, 0755) unless (-e $cfgpath);
    if (! -d $cfgpath) {
        $self->Fail("Can't create directory: $cfgpath");
        return 1;
    }
    $result = LC::Check::file( $cfg,
                                  backup => ".old",
                                  contents => encode_utf8($contents),
                                );
    if ($result) {
        $self->log("$cfg updated");
    } else {
        $self->error("$cfg update failed");
        return 1;
    }

    ## next: opensm
    

}


# Required for end of module
1;  